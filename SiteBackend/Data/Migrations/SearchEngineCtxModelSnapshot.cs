// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using SiteBackend.Database;

#nullable disable

namespace SiteBackend.Data.Migrations
{
    [DbContext(typeof(SearchEngineCtx))]
    partial class SearchEngineCtxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Content", b =>
                {
                    b.Property<int>("ContentID")
                        .HasColumnType("integer");

                    b.Property<string>("ContentHash")
                        .HasColumnType("text");

                    b.Property<bool>("NeedsEmbedding")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasMaxLength(26214400)
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("ContentID");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.MediaEntry", b =>
                {
                    b.Property<int>("MediaEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MediaEntryID"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UrlID")
                        .HasColumnType("integer");

                    b.HasKey("MediaEntryID");

                    b.HasIndex("UrlID");

                    b.ToTable("MediaEntry");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Page", b =>
                {
                    b.Property<int>("PageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PageID"));

                    b.Property<DateTime?>("LastCrawlAttempt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastCrawled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WebsiteID")
                        .HasColumnType("integer");

                    b.HasKey("PageID");

                    b.HasIndex("WebsiteID");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Sitemap", b =>
                {
                    b.Property<int>("SitemapID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMapped")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentSitemapId")
                        .HasColumnType("integer");

                    b.HasKey("SitemapID");

                    b.HasIndex("ParentSitemapId");

                    b.ToTable("Sitemap");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.TextEmbedding", b =>
                {
                    b.Property<int>("TextEmbeddingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TextEmbeddingID"));

                    b.Property<int?>("ContentID")
                        .HasColumnType("integer");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector(768)");

                    b.Property<string>("EmbeddingHash")
                        .HasColumnType("text");

                    b.Property<string>("RawText")
                        .HasColumnType("text");

                    b.HasKey("TextEmbeddingID");

                    b.HasIndex("ContentID");

                    b.ToTable("TextEmbeddings");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Url", b =>
                {
                    b.Property<int>("UrlID")
                        .HasColumnType("integer");

                    b.Property<int?>("ChangeFrequency")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Priority")
                        .HasColumnType("real");

                    b.Property<int?>("SitemapID")
                        .HasColumnType("integer");

                    b.HasKey("UrlID");

                    b.HasIndex("SitemapID");

                    b.ToTable("Urls");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Website", b =>
                {
                    b.Property<int>("WebsiteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WebsiteID"));

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("WebsiteID");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Word", b =>
                {
                    b.Property<int>("WordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WordID"));

                    b.Property<SparseVector>("Embedding")
                        .HasColumnType("sparsevec(768)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TextEmbeddingID")
                        .HasColumnType("integer");

                    b.HasKey("WordID");

                    b.HasIndex("TextEmbeddingID");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.ImageEntry", b =>
                {
                    b.HasBaseType("SiteBackend.Models.SearchEngine.Index.MediaEntry");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.NewsEntry", b =>
                {
                    b.HasBaseType("SiteBackend.Models.SearchEngine.Index.MediaEntry");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("Publication")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.VideoEntry", b =>
                {
                    b.HasBaseType("SiteBackend.Models.SearchEngine.Index.MediaEntry");

                    b.Property<string>("ContentLocation")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Platform")
                        .HasColumnType("text");

                    b.Property<string>("PlayerLocation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("RequiresSubscription")
                        .HasColumnType("text");

                    b.Property<string>("Restrictions")
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailLocation")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("ViewCount")
                        .HasColumnType("integer");

                    b.ToTable("MediaEntry", t =>
                        {
                            t.Property("PublicationDate")
                                .HasColumnName("VideoEntry_PublicationDate");

                            t.Property("Title")
                                .HasColumnName("VideoEntry_Title");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Content", b =>
                {
                    b.HasOne("SiteBackend.Models.SearchEngine.Index.Page", "Page")
                        .WithOne("Content")
                        .HasForeignKey("SiteBackend.Models.SearchEngine.Index.Content", "ContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.MediaEntry", b =>
                {
                    b.HasOne("SiteBackend.Models.SearchEngine.Index.Url", null)
                        .WithMany("Media")
                        .HasForeignKey("UrlID");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Page", b =>
                {
                    b.HasOne("SiteBackend.Models.SearchEngine.Index.Website", "Website")
                        .WithMany("Pages")
                        .HasForeignKey("WebsiteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Sitemap", b =>
                {
                    b.HasOne("SiteBackend.Models.SearchEngine.Index.Sitemap", "ParentSitemap")
                        .WithMany("SitemapIndex")
                        .HasForeignKey("ParentSitemapId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SiteBackend.Models.SearchEngine.Index.Website", "Website")
                        .WithOne("Sitemap")
                        .HasForeignKey("SiteBackend.Models.SearchEngine.Index.Sitemap", "SitemapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentSitemap");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.TextEmbedding", b =>
                {
                    b.HasOne("SiteBackend.Models.SearchEngine.Index.Content", null)
                        .WithMany("Embeddings")
                        .HasForeignKey("ContentID");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Url", b =>
                {
                    b.HasOne("SiteBackend.Models.SearchEngine.Index.Sitemap", "Sitemap")
                        .WithMany("UrlSet")
                        .HasForeignKey("SitemapID");

                    b.HasOne("SiteBackend.Models.SearchEngine.Index.Page", "Page")
                        .WithOne("Url")
                        .HasForeignKey("SiteBackend.Models.SearchEngine.Index.Url", "UrlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Sitemap");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Word", b =>
                {
                    b.HasOne("SiteBackend.Models.SearchEngine.Index.TextEmbedding", null)
                        .WithMany("Words")
                        .HasForeignKey("TextEmbeddingID");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Content", b =>
                {
                    b.Navigation("Embeddings");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Page", b =>
                {
                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Url")
                        .IsRequired();
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Sitemap", b =>
                {
                    b.Navigation("SitemapIndex");

                    b.Navigation("UrlSet");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.TextEmbedding", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Url", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("SiteBackend.Models.SearchEngine.Index.Website", b =>
                {
                    b.Navigation("Pages");

                    b.Navigation("Sitemap")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
